{"version":3,"sources":["modbus-basics.js"],"names":["require","install","de","biancoroyal","modbus","basics","internalDebug","util","get_timeUnit_name","unit","unitAbbreviation","calc_rateByUnit","rate","rateUnit","parseInt","setNodeStatusProperties","statusValue","showActivities","fillValue","shapeValue","statusText","value","fill","status","shape","setNodeStatusByResponseTo","response","node","text","this","inspect","message","setNodeStatusResponse","length","setNodeStatusTo","setModbusError","modbusClient","err","msg","emit","statusOptions","setNodeDefaultStatus","showStatusActivities","onModbusConnect","failureMsg","onModbusInit","onModbusActive","onModbusBroken","showErrors","warn","initModbusClientEvents","_this","onModbusQueue","reconnectTimeout","on","onModbusError","onModbusClose","invalidPayloadIn","invalidSequencesIn","call","sendEmptyMsgOnFail","emptyMsgOnFail","prototype","hasOwnProperty","Error","error","nodeStatus","send","Object","assign","logMsgError","minMsg","buildNewMessage","keepMsgProperties","module","exports"],"mappings":"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","file":"../modbus-basics.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n'use strict'\nrequire('source-map-support').install()\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { basics: {} } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.basics.internalDebug = de.biancoroyal.modbus.basics.internalDebug || require('debug')('contribModbus:basics') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.basics.util = de.biancoroyal.modbus.basics.util || require('util') // eslint-disable-line no-use-before-define\n\n/**\n * Modbus core node basics.\n * @module NodeRedModbusBasics\n */\nde.biancoroyal.modbus.basics.statusLog = false\n/**\n *\n * @param unit\n * @returns {string}\n */\nde.biancoroyal.modbus.basics.get_timeUnit_name = function (unit) {\n  let unitAbbreviation = ''\n\n  switch (unit) {\n    case 'ms':\n      unitAbbreviation = 'msec.'\n      break\n    case 's':\n      unitAbbreviation = 'sec.'\n      break\n    case 'm':\n      unitAbbreviation = 'min.'\n      break\n    case 'h':\n      unitAbbreviation = 'h.'\n      break\n    default:\n      break\n  }\n\n  return unitAbbreviation\n}\n\nde.biancoroyal.modbus.basics.calc_rateByUnit = function (rate, rateUnit) {\n  switch (rateUnit) {\n    case 'ms':\n      break\n    case 's':\n      rate = parseInt(rate) * 1000 // seconds\n      break\n    case 'm':\n      rate = parseInt(rate) * 60000 // minutes\n      break\n    case 'h':\n      rate = parseInt(rate) * 3600000 // hours\n      break\n    default:\n      rate = 10000 // 10 sec.\n      break\n  }\n\n  return rate\n}\n/**\n *\n * @param statusValue\n * @param showActivities\n * @returns {{fill: string, shape: string, status: *}}\n */\nde.biancoroyal.modbus.basics.setNodeStatusProperties = function (statusValue, showActivities) {\n  let fillValue = 'yellow'\n  let shapeValue = 'ring'\n\n  if (!statusValue) {\n    statusValue = 'waiting'\n  }\n\n  let statusText = statusValue.value || statusValue\n\n  switch (statusText) {\n    case 'connecting':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'error':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'initialized':\n    case 'init':\n      fillValue = 'yellow'\n      shapeValue = 'dot'\n      break\n\n    case 'not ready to read':\n    case 'not ready to write':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'connected':\n    case 'queueing':\n    case 'queue':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'timeout':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n    case 'reading':\n    case 'writing':\n    case 'active reading':\n    case 'active writing':\n      if (!showActivities) {\n        statusText = 'active'\n      }\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    case 'disconnected':\n    case 'terminated':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'stopped':\n      fillValue = 'red'\n      shapeValue = 'dot'\n      break\n\n    case 'polling':\n      fillValue = 'green'\n      if (showActivities) {\n        shapeValue = 'ring'\n      } else {\n        statusText = 'active'\n        shapeValue = 'dot'\n      }\n      break\n\n    default:\n      if (statusText === 'waiting') {\n        fillValue = 'blue'\n        statusText = 'waiting ...'\n      }\n      break\n  }\n\n  return { fill: fillValue, shape: shapeValue, status: statusText }\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusByResponseTo = function (statusValue, response, node) {\n  let fillValue = 'red'\n  let shapeValue = 'dot'\n\n  switch (statusValue) {\n    case 'initialized':\n    case 'queue':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    default:\n      if (!statusValue || statusValue === 'waiting') {\n        fillValue = 'blue'\n        statusValue = 'waiting ...'\n      }\n      break\n  }\n\n  node.status({ fill: fillValue, shape: shapeValue, text: this.util.inspect(response, false, null) })\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusResponse = function (length, node) {\n  node.status({\n    fill: 'green',\n    shape: 'dot',\n    text: 'active got length: ' + length\n  })\n}\n\nde.biancoroyal.modbus.basics.setModbusError = function (node, modbusClient, err, msg) {\n  if (err) {\n    switch (err.message) {\n      case 'Timed out':\n        this.setNodeStatusTo('timeout', node)\n        break\n      case 'FSM Not Ready To Reconnect':\n        this.setNodeStatusTo('not ready to reconnect', node)\n        break\n      case 'Port Not Open':\n        this.setNodeStatusTo('reconnect', node)\n        modbusClient.emit('reconnect')\n        break\n      default:\n        this.internalDebug(err.message)\n        if (node.showErrors) {\n          this.setNodeStatusTo('error ' + err.message, node)\n        }\n    }\n  }\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusTo = function (statusValue, node) {\n  if (node.showStatusActivities) {\n    if (statusValue !== node.statusText) {\n      const statusOptions = this.setNodeStatusProperties(statusValue, node.showStatusActivities)\n      node.statusText = statusValue\n      node.status({\n        fill: statusOptions.fill,\n        shape: statusOptions.shape,\n        text: statusOptions.status\n      })\n    } else {\n      this.setNodeDefaultStatus(node)\n    }\n  }\n}\n\nde.biancoroyal.modbus.basics.onModbusInit = function (node) {\n  this.setNodeStatusTo('initialize', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusConnect = function (node) {\n  this.setNodeStatusTo('connected', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusActive = function (node) {\n  this.setNodeStatusTo('active', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusError = function (node, failureMsg) {\n  this.setNodeStatusTo('failure', node)\n  if (node.showErrors) {\n    node.warn(failureMsg)\n  }\n}\n\nde.biancoroyal.modbus.basics.onModbusClose = function (node) {\n  this.setNodeStatusTo('closed', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusQueue = function (node) {\n  this.setNodeStatusTo('queueing', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusBroken = function (node, modbusClient) {\n  this.setNodeStatusTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.', node)\n}\n\nde.biancoroyal.modbus.basics.setNodeDefaultStatus = function (node) {\n  node.status({ fill: 'green', shape: 'ring', text: 'active' })\n}\n\nde.biancoroyal.modbus.basics.initModbusClientEvents = function (node, modbusClient) {\n  if (node.showStatusActivities) {\n    modbusClient.on('mbinit', () => { this.onModbusInit(node) })\n    modbusClient.on('mbqueue', () => { this.onModbusQueue(node) })\n    modbusClient.on('mbconnected', () => { this.onModbusConnect(node) })\n    modbusClient.on('mbbroken', () => { this.onModbusBroken(node, modbusClient) })\n    modbusClient.on('mbactive', () => { this.onModbusActive(node) })\n    modbusClient.on('mberror', (failureMsg) => { this.onModbusError(node, failureMsg) })\n    modbusClient.on('mbclosed', () => { this.onModbusClose(node) })\n  } else {\n    this.setNodeDefaultStatus(node)\n  }\n}\n\nde.biancoroyal.modbus.basics.invalidPayloadIn = function (msg) {\n  return !(msg && Object.prototype.hasOwnProperty.call(msg, 'payload'))\n}\n\nde.biancoroyal.modbus.basics.invalidSequencesIn = function (msg) {\n  return !(msg && Object.prototype.hasOwnProperty.call(msg, 'sequences'))\n}\n\nde.biancoroyal.modbus.basics.sendEmptyMsgOnFail = function (node, err, msg) {\n  if (node.emptyMsgOnFail) {\n    msg.payload = ''\n\n    if (err && err.message && err.name) {\n      msg.error = err\n    } else {\n      msg.error = Error(err)\n    }\n    msg.error.nodeStatus = node.statusText\n\n    node.send([msg, msg])\n  }\n}\n\nde.biancoroyal.modbus.basics.logMsgError = function (node, err, msg) {\n  if (node.showErrors) {\n    node.error(err, msg)\n  }\n}\n\nde.biancoroyal.modbus.basics.buildNewMessage = function (keepMsgProperties, msg, minMsg) {\n  if (keepMsgProperties) {\n    return Object.assign(msg, minMsg)\n  } else {\n    return minMsg\n  }\n}\n\nmodule.exports = de.biancoroyal.modbus.basics\n"]}