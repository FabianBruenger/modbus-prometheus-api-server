{"version":3,"sources":["modbus-response-filter.js"],"names":["module","exports","RED","install","mbCore","require","mbBasics","nodes","registerType","config","modbusIOFileValuNames","createNode","this","name","filter","registers","filterResponseBuffer","filterValues","filterInput","showErrors","showStatusActivities","showWarnings","ioFile","getNode","node","configData","on","payload","filterFromPayload","msg","values","item","responseBuffer","invalidPayloadIn","send","length","error","Error","internalDebug","setNodeStatusTo","httpAdmin","get","auth","needsPermission","req","res","json"],"mappings":"aAWAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,oBAAA,EAGNC,EAAWD,QAAQ,iBAAiB,EAF1CA,EAA4B,GA+E5BH,EAAIK,MAAMC,aAAa,yBA7EvB,SAAyBC,GACzBP,EAAIQ,MAAAA,WAAAA,KAAwBD,CAAE,EAG5BP,KAAIK,KAAMI,EAAAA,KAEVC,KAAKC,OAAOJ,EAAOI,OACnBD,KAAKE,UAASL,SAAOK,EAAMC,SAAA,GAAA,KAG3BH,KAAKI,qBAAuBP,EAAOO,qBACnCJ,KAAKK,aAAeR,EAAOQ,aAC3BL,KAAKM,YAAcT,EAAOS,YAG1BN,KAAKO,qBAAoBA,EAAUC,qBACnCR,KAAKS,WAAYZ,EAAGA,WAEpBG,KAAKU,aAAaf,EAAMgB,aAIxBb,KAAAA,OAAAA,EAAAA,MAAwBc,QAAKF,EAAOG,MAAAA,EAIpCD,IAAKF,EAAOI,KAEZhB,EAAEc,EAAAF,OAAAG,WAJFnB,EAOMqB,gBAAcA,SAAeH,CAAA,EALnCA,EAOIF,OAAAI,GAAA,gBAAA,SAAAD,GAEFf,EAASM,CAPX,CAAC,EAEDQ,EASEI,kBAAuB,SAAAC,GAQvB,OAhBAA,EASEF,QAAWG,EAAAA,QAAMhB,OAAA,SAAAiB,GACnB,OAAAA,EAAAlB,OAAAW,EAAAV,MAEA,CAAA,EAEAU,EAAAR,sBAEA,OAAOa,EAAGG,eAIN1B,EAAAA,cACF,OAAAuB,EAAAC,OAIAN,EAAKK,aAZL,OAaML,EAAKL,MAGTU,CAZN,EAEAL,EAaKE,GAAA,QAAM,SAAAG,GACLL,EAASS,iBAAML,CAAAA,IAIjBJ,EAAAA,EAAKU,WAAgC,EAAtBN,EAAAA,YACjBC,EAAAF,QAAAQ,QAAAN,EAAAF,QAAAQ,SAAAX,EAAAT,UADES,EAAKU,KAAKV,EAAKI,kBAAkBC,CAAG,CAAC,GAEvCL,EAAAL,YAEMK,EAAAY,MAAS,IAAAC,MAAYR,EAAAF,QAAAQ,OAAA,mBAAAX,EAAAT,SAAA,CAAA,EAE3BS,EAAAH,cACJjB,EAAAkC,cAAAT,EAAAF,QAAAQ,OAAA,mCAAAX,EAAAT,UAAA,iBAAA,GALE,CAAC,EAEDS,EAAKE,GAAG,QAAS,WACfpB,EAASiC,gBAAgB,SAAUf,CAAI,CACzC,CAAC,CACH,CAEqE,EAErEtB,EAAIsC,UAAUC,IAAI,4BAA6BvC,EAAIwC,KAAKC,gBAAgB,aAAa,EAAG,SAAUC,EAAKC,GACrGA,EAAIC,KAAKpC,CAAqB,CAChC,CAAC,CACH","file":"../modbus-response-filter.js","sourcesContent":["/**\n Copyright (c) 2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n/**\n * Modbus flexible Getter node.\n * @module NodeRedModbusFlexGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbCore = require('./core/modbus-core')\n  const mbBasics = require('./modbus-basics')\n  let modbusIOFileValuNames = []\n\n  function ModbusResponseFilter (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.filter = config.filter\n    this.registers = parseInt(config.registers) || null\n\n    this.filterResponseBuffer = config.filterResponseBuffer\n    this.filterValues = config.filterValues\n    this.filterInput = config.filterInput\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n\n    const node = this\n\n    modbusIOFileValuNames = node.ioFile.configData\n\n    mbBasics.setNodeStatusTo('active', node)\n\n    node.ioFile.on('updatedConfig', function (configData) {\n      modbusIOFileValuNames = configData\n    })\n\n    node.filterFromPayload = function (msg) {\n      msg.payload = msg.payload.filter((item) => {\n        return item.name === node.filter\n      })\n\n      if (node.filterResponseBuffer) {\n        delete msg.responseBuffer\n      }\n\n      if (node.filterValues) {\n        delete msg.values\n      }\n\n      if (node.filterInput) {\n        delete msg.input\n      }\n\n      return msg\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (node.registers && node.registers > 0) {\n        if (!msg.payload.length || msg.payload.length !== node.registers) {\n          if (node.showErrors) {\n            node.error(new Error(msg.payload.length + ' does not match ' + node.registers))\n          }\n          if (node.showWarnings) {\n            mbCore.internalDebug(msg.payload.length + ' Registers And Filter Length Of ' + node.registers + ' Does Not Match')\n          }\n        } else {\n          node.send(node.filterFromPayload(msg))\n        }\n      } else {\n        // without register safety\n        node.send(node.filterFromPayload(msg))\n      }\n    })\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n    })\n  }\n\n  RED.nodes.registerType('modbus-response-filter', ModbusResponseFilter)\n\n  RED.httpAdmin.get('/modbus/iofile/valuenames', RED.auth.needsPermission('iofile.read'), function (req, res) {\n    res.json(modbusIOFileValuNames)\n  })\n}\n"]}