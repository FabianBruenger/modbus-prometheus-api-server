{"version":3,"sources":["modbus-flex-server.js"],"names":["module","exports","RED","install","ModbusRTU","require","coreServer","nodes","registerType","config","internalDebugLog","ModbusFlexServer","bufferFactor","this","_require","logEnabled","VMScript","name","parseInt","serverPort","responseDelay","serverAddress","delayUnit","splitAddress","unitId","compile","showErrors","funcGetDiscreteInput","funcGetCoil","funcGetHoldingRegister","funcSetCoil","verboseLogging","settings","verbose","message","msg","payload","type","node","registers","slice","coils","coilsBufferSize","alloc","registersBufferSize","mbBasics","setNodeStatusTo","Buffer","modbusServer","vector","vm","VM","sandbox","run","funcSetRegister","startServer","funcGetInputRegister","error","ServerTCP","port","debug","unitID","err","close","warn","on","sock","JSON","stringify","address","remoteAddress","remotePort","_server","disableMsgOutput","buildMessage","writeToFlexServerMemory","send","isValidMessage"],"mappings":"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","file":"../modbus-flex-server.js","sourcesContent":["/**\n Copyright (c) 2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus Server node.\n * @module NodeRedModbusServer\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const ModbusRTU = require('modbus-serial')\n  const coreServer = require('./core/modbus-server-core')\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:flex:server')\n\n  function ModbusFlexServer (config) {\n    RED.nodes.createNode(this, config)\n    const { VM, VMScript } = require('vm2')\n\n    this.name = config.name\n    this.logEnabled = config.logEnabled\n    this.serverAddress = config.serverAddress || '0.0.0.0'\n    this.serverPort = parseInt(config.serverPort)\n    this.responseDelay = parseInt(config.responseDelay)\n    this.delayUnit = config.delayUnit\n    this.unitId = parseInt(config.unitId) || 1\n    this.minAddress = parseInt(config.minAddress) || 0\n    this.splitAddress = parseInt(config.splitAddress) || 10000\n    this.showErrors = config.showErrors\n\n    this.funcGetCoil = new VMScript(config.funcGetCoil).compile()\n    this.funcGetDiscreteInput = new VMScript(config.funcGetDiscreteInput).compile()\n    this.funcGetInputRegister = new VMScript(config.funcGetInputRegister).compile()\n    this.funcGetHoldingRegister = new VMScript(config.funcGetHoldingRegister).compile()\n\n    this.funcSetCoil = new VMScript(config.funcSetCoil).compile()\n    this.funcSetRegister = new VMScript(config.funcSetRegister).compile()\n\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    node.bufferFactor = coreServer.bufferFactor\n\n    node.coilsBufferSize = parseInt(config.coilsBufferSize * coreServer.bufferFactor)\n    node.registersBufferSize = parseInt(config.registersBufferSize * coreServer.bufferFactor)\n\n    node.coils = Buffer.alloc(node.coilsBufferSize, 0)\n    node.registers = Buffer.alloc(node.registersBufferSize, 0)\n\n    node.modbusServer = null\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    //     1...10000*  address - 1      Coils (outputs)    0   Read/Write\n    // 10001...20000*  address - 10001  Discrete Inputs    01  Read\n    // 30001...40000*  address - 30001  Input Registers    04  Read\n    // 40001...50000*  address - 40001  Holding Registers  03  Read/Write\n\n    node.vector = {}\n\n    const vm = new VM({\n      sandbox: { node }\n    })\n\n    vm.run('node.vector.getCoil = ' + config.funcGetCoil)\n    vm.run('node.vector.getDiscreteInput = ' + config.funcGetDiscreteInput)\n    vm.run('node.vector.getInputRegister = ' + config.funcGetInputRegister)\n    vm.run('node.vector.getHoldingRegister = ' + config.funcGetHoldingRegister)\n\n    vm.run('node.vector.setCoil = ' + config.funcSetCoil)\n    vm.run('node.vector.setRegister = ' + config.funcSetRegister)\n\n    node.startServer = function () {\n      try {\n        if (node.modbusServer === null) {\n          try {\n            node.modbusServer = new ModbusRTU.ServerTCP(node.vector, {\n              host: node.serverAddress,\n              port: node.serverPort,\n              debug: node.logEnabled,\n              unitID: node.unitId\n            })\n          } catch (err) {\n            node.error(err, { payload: 'server net error -> for port 502 on unix, you have to be a super user' })\n          }\n\n          node.modbusServer.on('socketError', function (err) {\n            internalDebugLog(err.message)\n            if (node.showErrors) {\n              node.warn(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n\n            node.modbusServer.close(function () {\n              node.startServer()\n            })\n          })\n\n          node.modbusServer.on('error', function (err) {\n            internalDebugLog('Modbus Flex Server error')\n            if (node.showErrors) {\n              node.error(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n          })\n\n          node.modbusServer._server.on('connection', function (sock) {\n            internalDebugLog('Modbus Flex Server client connection')\n            if (sock) {\n              internalDebugLog('Modbus Flex Server client to ' + JSON.stringify(sock.address()) + ' from ' + sock.remoteAddress + ' ' + sock.remotePort)\n            }\n            mbBasics.setNodeStatusTo('active', node)\n          })\n\n          node.modbusServer._server.on('error', function (err) {\n            internalDebugLog('Modbus Flex Server client error')\n            if (node.showErrors) {\n              node.error(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n          })\n        }\n\n        if (!node.showStatusActivities) {\n          mbBasics.setNodeDefaultStatus(node)\n        }\n      } catch (err) {\n        internalDebugLog(err.message)\n        if (node.showErrors) {\n          node.warn(err)\n        }\n        mbBasics.setNodeStatusTo('error', node)\n      }\n\n      if (node.modbusServer != null) {\n        internalDebugLog('Modbus Flex Server listening on modbus://' + node.serverAddress + ':' + node.serverPort)\n        mbBasics.setNodeStatusTo('initialized', node)\n      } else {\n        internalDebugLog('Modbus Flex Server isn\\'t ready')\n        mbBasics.setNodeStatusTo('error', node)\n      }\n    }\n\n    node.startServer()\n\n    node.on('input', function (msg) {\n      if (coreServer.isValidMemoryMessage(msg)) {\n        coreServer.writeToFlexServerMemory(node, msg)\n        if (msg.payload.disableMsgOutput !== 1) {\n          node.send(buildMessage(msg))\n        }\n      } else {\n        if (node.showErrors) {\n          node.error('Is Not A Valid Memory Write Message To Server', msg)\n        }\n        if (coreServer.isValidMessage(msg) && !msg.payload.disableMsgOutput) {\n          node.send(buildMessage(msg))\n        }\n      }\n    })\n\n    function buildMessage (msg) {\n      return [\n        { type: 'holding', message: msg, payload: node.registers.slice(node.splitAddress * coreServer.bufferFactor) },\n        { type: 'coils', message: msg, payload: node.coils.slice(0, node.splitAddress * coreServer.bufferFactor) },\n        { type: 'input', message: msg, payload: node.registers.slice(0, node.splitAddress * coreServer.bufferFactor) },\n        { type: 'discrete', message: msg, payload: node.coils.slice(node.splitAddress * coreServer.bufferFactor) },\n        { payload: 'request', type: 'message', message: msg }\n      ]\n    }\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n      if (node.modbusServer._server) {\n        node.modbusServer._server.close()\n      }\n      if (node.modbusServer) {\n        node.modbusServer.close()\n      }\n      node.modbusServer = null\n    })\n  }\n\n  try {\n    RED.nodes.registerType('modbus-flex-server', ModbusFlexServer)\n  } catch (err) {\n    internalDebugLog(err.message)\n  }\n}\n"]}