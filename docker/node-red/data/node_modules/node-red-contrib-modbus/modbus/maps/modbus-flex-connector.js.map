{"version":3,"sources":["modbus-flex-connector.js"],"names":["module","exports","RED","install","mbBasics","require","internalDebugLog","nodes","registerType","config","createNode","this","name","maxReconnectsPerMinute","emptyQueue","showStatusActivities","showErrors","verboseLogging","settings","verbose","setNodeStatusTo","modbusClient","node","getNode","server","onConfigDone","msg","config_change","onConfigError","err","message","error","nodeStatus","emptyMsgOnFail","Error","statusText","payload","send","invalidPayloadIn","emit","actualServiceState","setNodeDefaultStatus","JSON","stringify","ModbusFlexConnector"],"mappings":"aAWAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,iBAAA,EAGNC,EAAmBD,QAAQ,OAAO,EAAE,8BAA8B,EAmFxEH,EAAIK,MAAMC,aAAa,wBApFvB,SAAyBC,GACzBP,EAAMI,MAAAA,WAAmBD,KAAAA,CAAQ,EAG/BH,KAAIK,KAAMG,EAAAA,KAEVC,KAAKC,uBAAkBH,EAAAI,wBAAA,EACvBF,KAAKE,WAAAA,EAAAA,WACLF,KAAKG,qBAAoBA,EAAUC,qBACnCJ,KAAKI,WAAAA,EAAoBC,WACzBL,KAAKK,WAAaP,KAGlBE,KAAKL,iBAAmBA,EACxBK,KAAKM,eAAiBf,EAAIgB,SAASC,QAGnCf,IAAAA,EAASgB,KAIPC,GAFFjB,EAAMiB,gBAAmBd,UAAae,CAACb,EAErCP,EAAAK,MAAAgB,QAAAd,EAAAe,MAAA,GACFH,IAIAC,EAAKG,kBAAyBC,CAAK,EAFnCtB,EAGMkB,uBAAyBA,EAAED,CAAA,EADjCC,EAGEG,aAAA,SAAAC,GACIC,EAAAA,sBACJL,EAAUI,gBAAI,cAAAJ,CAAA,EAGhBA,EAAKM,cAAgB,UACnBtB,EAAAA,KAAAA,CAAAA,CAHF,EAEAgB,EAIEM,cAAA,SAAAC,EAAAH,GAEApB,EAAewB,EAAAA,OAAS,EACtBJ,EAAIK,YACLT,EAAMS,MAAAF,EAAAH,CAAA,EAGHK,GAAMC,EAAAA,QAEVN,EAAIJ,MAAKW,EAETP,EAAAK,MAAA,IAAAG,MAAAL,CAAA,EAGDH,EAAAK,MAAAC,WAAAV,EAAAa,WAGK/B,EAAAA,iBACFsB,EAAAU,QAAA,IALFd,EASEe,KAAAX,CAAA,CARJ,EAEAJ,EAUIlB,GAAAA,QAASgB,SAAAA,GACX,IAOQW,EAPR3B,EAAAkC,iBAAAZ,CAAA,GAKEL,EAAakB,SAKbjB,EAAKe,sBACPjC,EAAAgB,gBAAAC,EAAAmB,mBAAAlB,CAAA,EAIAlB,EAAQgC,QAACK,eACXnC,EAAA,qBAAAoC,KAAAC,UAAAjB,EAAAU,OAAA,CAAA,EACFV,EAAAU,QAAAtB,WAAAQ,EAAAR,WAEIP,EAAMC,KAAa,mBAAAkB,EAAyBkB,EAAAA,aAAoBtB,EAAAM,aAAA,IAZxDG,EAAQ,IAAIG,MAAM,oCAAoC,EAC5DZ,EAAKS,MAAMA,EAAOL,CAAG,EAErBJ,EAAKe,KAAKX,CAAG,GAEjB,CAAC,EAEIJ,EAAKP,sBACRX,EAASqC,qBAAqBnB,CAAI,EAEtC,CAEmE,CACrE","file":"../modbus-flex-connector.js","sourcesContent":["/**\n Copyright (c) 2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n/**\n * Modbus flexible Getter node.\n * @module NodeRedModbusFlexGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:flex:connector')\n\n  function ModbusFlexConnector (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.maxReconnectsPerMinute = config.maxReconnectsPerMinute || 4\n    this.emptyQueue = config.emptyQueue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connection = null\n\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onConfigDone = function (msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('config done', node)\n      }\n      msg.config_change = 'emitted'\n      node.send(msg)\n    }\n\n    node.onConfigError = function (err, msg) {\n      internalDebugLog(err.message)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n\n      if (err && err.message) {\n        msg.error = err\n      } else {\n        msg.error = new Error(err)\n      }\n      msg.error.nodeStatus = node.statusText\n\n      if (node.emptyMsgOnFail) {\n        msg.payload = ''\n      }\n\n      node.send(msg)\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (!modbusClient.client) {\n        return\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n      }\n\n      if (msg.payload.connectorType) {\n        internalDebugLog('dynamicReconnect: ' + JSON.stringify(msg.payload))\n        msg.payload.emptyQueue = node.emptyQueue\n        modbusClient.emit('dynamicReconnect', msg, node.onConfigDone, node.onConfigError)\n      } else {\n        const error = new Error('Payload Not Valid - Connector Type')\n        node.error(error, msg)\n\n        node.send(msg)\n      }\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-connector', ModbusFlexConnector)\n}\n"]}