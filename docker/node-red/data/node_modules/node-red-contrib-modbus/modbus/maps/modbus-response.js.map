{"version":3,"sources":["modbus-response.js"],"names":["module","exports","RED","install","mbBasics","require","nodes","registerType","config","createNode","this","node","setNodeStatusTo","on","Object","prototype","hasOwnProperty","inputType","call","msg","payload","data","length","registerShowMax","setNodeStatusResponse","setNodeStatusByResponseTo","JSON","stringify"],"mappings":"aAaAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,iBAAA,EAiDZH,EAAII,MAAMC,aAAa,kBAhDvBF,SAAQG,GACRN,EAAME,MAAQK,WAAWC,KAAAF,CAAA,EAGvBN,KAAII,gBAAiBE,EAAMA,gBAI3B,IAAMG,EAAOD,KAIbC,EAAQC,gBAAS,cAAeD,CAAA,EAAhCA,EAGEE,GAAIC,QAAOC,SAAUC,GAFrB,IAGEC,EAAY,UAOd,OAJIH,OAAOC,UAAUC,eAAeE,KAAKC,EAAIC,QAAS,MAAA,IACpDH,EAAY,QAAZA,EAIAH,OAAKC,UAAMC,eAAAE,KAAAC,EAAAC,QAAA,SAAA,EACDA,UAGNhB,GAJJ,IAKE,OACAe,EAAAC,QAAAC,KAAAC,OAAAX,EAAAY,gBACFnB,EAAKoB,sBAASL,EAAAC,QAAAC,KAAAC,OAAAX,CAAA,EAEVP,EAASoB,0BAA0BJ,SAAQE,EAAMF,QAAOT,CAAA,EAH1D,MACF,IAKE,UACAQ,EAAAC,QAAAE,QAAAH,EAAAC,QAAAE,OAAAX,EAAAY,gBACFnB,EAAAoB,sBAAAL,EAAAC,QAAAE,OAAAX,CAAA,EACiFP,EAAAqB,0BAAA,SAAAN,EAAAC,QAAAT,CAAA,EAIhFE,MACHT,QACAA,EAAAqB,0BAAA,SAAAC,KAAAC,UAAAR,EAAAC,OAAA,EAAAT,CAAA,CAAA,CAGJT,CAAG,EALDS,EAAKE,GAAG,QAAS,WACfT,EAASQ,gBAAgB,SAAUD,CAAI,CACzC,CAAC,CACH,CAEwD,CAC1D","file":"../modbus-response.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Response node.\n * @module NodeRedModbusResponse\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n\n  function ModbusResponse (config) {\n    RED.nodes.createNode(this, config)\n\n    this.registerShowMax = config.registerShowMax\n\n    const node = this\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    node.on('input', function (msg) {\n      let inputType = 'default'\n\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'data')) {\n        inputType = 'data'\n      }\n\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'address')) {\n        inputType = 'address'\n      }\n\n      switch (inputType) {\n        case 'data':\n          if (msg.payload.data.length > node.registerShowMax) {\n            mbBasics.setNodeStatusResponse(msg.payload.data.length, node)\n          } else {\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\n          }\n          break\n        case 'address':\n          if (msg.payload.length && msg.payload.length > node.registerShowMax) {\n            mbBasics.setNodeStatusResponse(msg.payload.length, node)\n          } else {\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\n          }\n          break\n        default:\n          mbBasics.setNodeStatusByResponseTo('active', JSON.stringify(msg.payload), node)\n      }\n    })\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n    })\n  }\n\n  RED.nodes.registerType('modbus-response', ModbusResponse)\n}\n"]}