{"version":3,"sources":["core/modbus-client-core.js"],"names":["require","install","de","biancoroyal","modbus","core","client","internalDebug","internalDebugFSM","modbusSerialDebug","XStateFSM","stateLogEnabled","networkErrors","this","createMachine","states","new","on","INIT","BREAK","STOP","broken","initial","FAILURE","ACTIVATE","RECONNECT","reconnecting","init","OPENSERIAL","CONNECT","SWITCH","opened","CLOSE","connected","QUEUE","activated","READ","WRITE","queueing","EMPTY","empty","sending","reading","writing","failed","switch","stopped","NEW","getActualUnitId","node","msg","payload","Number","isInteger","unitid","parseInt","queueUnitId","unit_id","startStateService","toggleMachine","interpret","start","checkUnitId","clientType","SEND","getLogFunction","activateSendingOnSuccess","cb","cberr","resp","activateSending","then","err","stateService","send","activateSendingOnFailure","readModbusByFunctionCodeOne","address","quantity","coreClient","Error","message","modbusErrorHandling","readModbusByFunctionCodeTwo","closed","readModbusByFunctionCodeThree","readHoldingRegisters","readModbusByFunctionCodeFour","readModbusByFunctionCode","fc","nodeLog","readModbus","delayTime","_port","_client","readable","connectClient","setTimeout","JSON","stringify","info","timeout","getTimeout","state","actualServiceState","value","clienttype","writeModbusByFunctionCodeFive","writeCoil","getID","length","writeCoils","writeModbusByFunctionCodeSix","writeRegister","queueLog","writeModbusByFunctionCodeSixteen","writeRegisters","setUnitIdFromPayload","clientTimeout","writeModbus","writable","bufferCommands","writeModbusByFunctionCodeFifteen","tcpHost","tcpPort","tcpType","serialPort","serialBaudrate","serialStopbits","serialParity","serialType","serialAsciiResponseStartDelimiter","serialConnectionDelay","setNewNodeOptionalSettings","unitId","commandDelay","reconnectTimeout","setNewNodeSettings","connectorType","toUpperCase","setNewTCPNodeSettings","messageAllowedStates","module"],"mappings":"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","file":"../../core/modbus-client-core.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n'use strict'\nrequire('source-map-support').install()\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { core: { client: {} } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebug = de.biancoroyal.modbus.core.client.internalDebug || require('debug')('contribModbus:core:client') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebugFSM = de.biancoroyal.modbus.core.client.internalDebugFSM || require('debug')('contribModbus:core:client:fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.modbusSerialDebug = de.biancoroyal.modbus.core.client.modbusSerialDebug || require('debug')('modbus-serial') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.XStateFSM = de.biancoroyal.modbus.core.client.XStateFSM || require('@xstate/fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.stateLogEnabled = de.biancoroyal.modbus.core.client.stateLogEnabled || false // eslint-disable-line no-use-before-define\n\nde.biancoroyal.modbus.core.client.networkErrors = ['ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNRESET', 'ENETRESET',\n  'ECONNABORTED', 'ECONNREFUSED', 'ENETUNREACH', 'ENOTCONN',\n  'ESHUTDOWN', 'EHOSTDOWN', 'ENETDOWN', 'EWOULDBLOCK', 'EAGAIN', 'EHOSTUNREACH']\n\nde.biancoroyal.modbus.core.client.createStateMachineService = function () {\n  this.stateLogEnabled = false\n\n  // failure is a general gate point in states to jump between states\n  return this.XStateFSM.createMachine({\n    id: 'modbus',\n    initial: 'new',\n    states: {\n      new: {\n        on: { INIT: 'init', BREAK: 'broken', STOP: 'stopped' }\n      },\n      broken: {\n        on: { INIT: 'init', STOP: 'stopped', FAILURE: 'failed', ACTIVATE: 'activated', RECONNECT: 'reconnecting' }\n      },\n      reconnecting: {\n        on: { INIT: 'init', STOP: 'stopped' }\n      },\n      init: {\n        on: { OPENSERIAL: 'opened', CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      opened: {\n        on: { CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      connected: {\n        on: { CLOSE: 'closed', ACTIVATE: 'activated', QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      activated: {\n        on: {\n          READ: 'reading',\n          WRITE: 'writing',\n          QUEUE: 'queueing',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      queueing: {\n        on: {\n          ACTIVATE: 'activated',\n          SEND: 'sending',\n          READ: 'reading',\n          WRITE: 'writing',\n          EMPTY: 'empty',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      empty: { on: { QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\n      sending: { on: { ACTIVATE: 'activated', READ: 'reading', WRITE: 'writing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      reading: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      writing: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      closed: { on: { FAILURE: 'failed', BREAK: 'broken', CONNECT: 'connected', RECONNECT: 'reconnecting', INIT: 'init', STOP: 'stopped', SWITCH: 'switch' } },\n      failed: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped', SWITCH: 'switch' } },\n      switch: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped' } },\n      stopped: { on: { NEW: 'new', STOP: 'stopped' } }\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.getActualUnitId = function (node, msg) {\n  if (msg.payload && Number.isInteger(msg.payload.unitid)) {\n    return parseInt(msg.payload.unitid)\n  } else if (Number.isInteger(msg.queueUnitId)) {\n    return parseInt(msg.queueUnitId)\n  } else {\n    return parseInt(node.unit_id) || 0\n  }\n}\n\nde.biancoroyal.modbus.core.client.startStateService = function (toggleMachine) {\n  return this.XStateFSM.interpret(toggleMachine).start()\n}\n\nde.biancoroyal.modbus.core.client.checkUnitId = function (unitid, clientType) {\n  if (clientType === 'tcp') {\n    return unitid >= 0 && unitid <= 255\n  } else {\n    return unitid >= 0 && unitid <= 247\n  }\n}\n\nde.biancoroyal.modbus.core.client.getLogFunction = function (node) {\n  if (node.internalDebugLog) {\n    return node.internalDebugLog\n  } else {\n    return de.biancoroyal.modbus.core.client.internalDebug\n  }\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnSuccess = function (node, cb, cberr, resp, msg) {\n  node.activateSending(msg).then(function () {\n    cb(resp, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnFailure = function (node, cberr, err, msg) {\n  node.activateSending(msg).then(function () {\n    cberr(err, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeOne = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readCoils(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeTwo = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readDiscreteInputs(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeThree = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readHoldingRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeFour = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readInputRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCode = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  switch (parseInt(msg.payload.fc)) {\n    case 1:\n      coreClient.readModbusByFunctionCodeOne(node, msg, cb, cberr)\n      break\n    case 2:\n      coreClient.readModbusByFunctionCodeTwo(node, msg, cb, cberr)\n      break\n    case 3:\n      coreClient.readModbusByFunctionCodeThree(node, msg, cb, cberr)\n      break\n    case 4:\n      coreClient.readModbusByFunctionCodeFour(node, msg, cb, cberr)\n      break\n    default:\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n      nodeLog('Function Code Unknown %s', msg.payload.fc)\n      break\n  }\n}\n\nde.biancoroyal.modbus.core.client.readModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Reading Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.readable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('READ')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'read msg via Modbus',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      coreClient.readModbusByFunctionCode(node, msg, cb, cberr)\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFive = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (msg.payload.value) {\n    msg.payload.value = true\n  } else {\n    msg.payload.value = false\n  }\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFifteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to coil payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeCoils(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSix = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.writeRegister(parseInt(msg.payload.address), parseInt(msg.payload.value)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSixteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to register payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeRegisters(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Writing Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.writable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('WRITE')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'write msg',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      switch (parseInt(msg.payload.fc)) {\n        case 15: // FC: 15\n          coreClient.writeModbusByFunctionCodeFifteen(node, msg, cb, cberr)\n          break\n        case 5: // FC: 5\n          coreClient.writeModbusByFunctionCodeFive(node, msg, cb, cberr)\n          break\n        case 16: // FC: 16\n          coreClient.writeModbusByFunctionCodeSixteen(node, msg, cb, cberr)\n          break\n        case 6: // FC: 6\n          coreClient.writeModbusByFunctionCodeSix(node, msg, cb, cberr)\n          break\n        default:\n          coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n          nodeLog('Function Code Unknown %s', msg.payload.fc)\n          break\n      }\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.setNewTCPNodeSettings = function (node, msg) {\n  node.clienttype = 'tcp'\n  node.tcpHost = msg.payload.tcpHost || node.tcpHost\n  node.tcpPort = msg.payload.tcpPort || node.tcpPort\n  node.tcpType = msg.payload.tcpType || node.tcpType\n}\n\nde.biancoroyal.modbus.core.client.setNewSerialNodeSettings = function (node, msg) {\n  if (msg.payload.serialPort) {\n    node.serialPort = msg.payload.serialPort || node.serialPort\n  }\n\n  if (msg.payload.serialBaudrate) {\n    node.serialBaudrate = parseInt(msg.payload.serialBaudrate) || node.serialBaudrate\n  }\n\n  node.clienttype = 'serial'\n  node.serialDatabits = msg.payload.serialDatabits || node.serialDatabits\n  node.serialStopbits = msg.payload.serialStopbits || node.serialStopbits\n  node.serialParity = msg.payload.serialParity || node.serialParity\n  node.serialType = msg.payload.serialType || node.serialType\n\n  // Make sure is parsed when string, otherwise just assign.\n  if (msg.payload.serialAsciiResponseStartDelimiter && typeof msg.payload.serialAsciiResponseStartDelimiter === 'string') {\n    node.serialAsciiResponseStartDelimiter = parseInt(msg.payload.serialAsciiResponseStartDelimiter, 16)\n  } else {\n    node.serialAsciiResponseStartDelimiter = msg.payload.serialAsciiResponseStartDelimiter || node.serialAsciiResponseStartDelimiter\n  }\n\n  if (msg.payload.serialConnectionDelay) {\n    node.serialConnectionDelay = parseInt(msg.payload.serialConnectionDelay) || node.serialConnectionDelay\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeOptionalSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  try {\n    let unitId = parseInt(msg.payload.unitId)\n    if (!node.checkUnitId(unitId, node.clienttype)) {\n      unitId = node.unit_id\n    }\n    node.unit_id = unitId\n  } catch (err) {\n    nodeLog(err.message)\n  }\n\n  if (msg.payload.commandDelay) {\n    node.commandDelay = parseInt(msg.payload.commandDelay) || node.commandDelay\n  }\n\n  if (msg.payload.clientTimeout) {\n    node.clientTimeout = parseInt(msg.payload.clientTimeout) || node.clientTimeout\n  }\n\n  if (msg.payload.reconnectTimeout) {\n    node.reconnectTimeout = parseInt(msg.payload.reconnectTimeout) || node.reconnectTimeout\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  const coreClient = de.biancoroyal.modbus.core.client\n\n  if (!msg) {\n    nodeLog('New Connection message invalid.')\n    return false\n  }\n\n  switch (msg.payload.connectorType.toUpperCase()) {\n    case 'TCP':\n      coreClient.setNewTCPNodeSettings(node, msg)\n      nodeLog('New Connection TCP Settings ' + node.tcpHost + ' ' + node.tcpPort + ' ' + node.tcpType)\n      break\n\n    case 'SERIAL':\n      coreClient.setNewSerialNodeSettings(node, msg)\n      nodeLog('New Connection Serial Settings ' + node.serialPort + ' ' + node.serialBaudrate + ' ' + node.serialType)\n      break\n\n    default:\n      nodeLog('Unknown Dynamic Reconnect Type ' + msg.payload.connectorType)\n  }\n\n  coreClient.setNewNodeOptionalSettings(node, msg)\n\n  return true\n}\n\nde.biancoroyal.modbus.core.client.messageAllowedStates = ['activated', 'queueing', 'sending', 'empty', 'connected']\n\nmodule.exports = de.biancoroyal.modbus.core.client\n"]}