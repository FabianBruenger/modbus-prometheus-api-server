{"version":3,"sources":["core/modbus-server-core.js"],"names":["require","install","_","de","biancoroyal","modbus","core","server","internalDebug","bufferFactor","memoryTypes","memoryUint16Types","memoryUint8Types","getLogFunction","node","internalDebugLog","isValidMemoryMessage","msg","payload","register","Number","address","isValidMessage","copyToModbusFlexBuffer","bufferData","copy","registers","bufferSplitAddress","coils","bufferAddress","writeToModbusFlexBuffer","writeUInt16BE","bufferPayload","writeUInt8","parseInt","splitAddress","coreServer","convertInputForBufferWrite","Buffer","byteLength","isMultipleWrite","wasMultipleWrite","length","Uint8Array","value","buffer","modbusServer","input","discrete","writeToModbusBuffer","holding","writeModbusServerMemory","writeToServerMemory","toLowerCase","copyToModbusBuffer","err","error","writeToFlexServerMemory","module","includes","writeModbusFlexServerMemory","exports"],"mappings":"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","file":"../../core/modbus-server-core.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n'use strict'\nrequire('source-map-support').install()\n\nconst _ = require('underscore')\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { core: { server: { } } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.server.internalDebug = de.biancoroyal.modbus.core.server.internalDebug || require('debug')('contribModbus:core:server') // eslint-disable-line no-use-before-define\n\nde.biancoroyal.modbus.core.server.bufferFactor = 8\nde.biancoroyal.modbus.core.server.memoryTypes = ['holding', 'coils', 'input', 'discrete']\nde.biancoroyal.modbus.core.server.memoryUint16Types = ['holding', 'input']\nde.biancoroyal.modbus.core.server.memoryUint8Types = ['coils', 'discrete']\n\nde.biancoroyal.modbus.core.server.getLogFunction = function (node) {\n  if (node.internalDebugLog) {\n    return node.internalDebugLog\n  } else {\n    return de.biancoroyal.modbus.core.server.internalDebug\n  }\n}\n\nde.biancoroyal.modbus.core.server.isValidMemoryMessage = function (msg) {\n  return _.isUndefined(msg.payload) === false &&\n    msg.payload.register &&\n    Number.isInteger(msg.payload.address) &&\n    msg.payload.address >= 0 &&\n    msg.payload.address <= 65535\n}\n\nde.biancoroyal.modbus.core.server.isValidMessage = function (msg) {\n  return _.isUndefined(msg) === false && _.isUndefined(msg.payload) === false\n}\n\nde.biancoroyal.modbus.core.server.copyToModbusFlexBuffer = function (node, msg) {\n  switch (msg.payload.register) {\n    case 'holding':\n      msg.bufferData.copy(node.registers, msg.bufferSplitAddress)\n      break\n    case 'coils':\n      msg.bufferData.copy(node.coils, msg.bufferAddress)\n      break\n    case 'input':\n      msg.bufferData.copy(node.registers, msg.bufferAddress)\n      break\n    case 'discrete':\n      msg.bufferData.copy(node.coils, msg.bufferSplitAddress)\n      break\n    default:\n      return false\n  }\n  return true\n}\n\nde.biancoroyal.modbus.core.server.writeToModbusFlexBuffer = function (node, msg) {\n  switch (msg.payload.register) {\n    case 'holding':\n      node.registers.writeUInt16BE(msg.bufferPayload, msg.bufferSplitAddress)\n      break\n    case 'coils':\n      node.coils.writeUInt8(msg.bufferPayload, msg.bufferAddress)\n      break\n    case 'input':\n      node.registers.writeUInt16BE(msg.bufferPayload, msg.bufferAddress)\n      break\n    case 'discrete':\n      node.coils.writeUInt8(msg.bufferPayload, msg.bufferSplitAddress)\n      break\n    default:\n      return false\n  }\n  return true\n}\n\nde.biancoroyal.modbus.core.server.writeModbusFlexServerMemory = function (node, msg) {\n  const coreServer = de.biancoroyal.modbus.core.server\n  msg.bufferSplitAddress = (parseInt(msg.payload.address) + parseInt(node.splitAddress)) * coreServer.bufferFactor\n  msg.bufferAddress = parseInt(msg.payload.address) * coreServer.bufferFactor\n\n  if (coreServer.convertInputForBufferWrite(msg)) {\n    return coreServer.copyToModbusFlexBuffer(node, msg)\n  } else {\n    return coreServer.writeToModbusFlexBuffer(node, msg)\n  }\n}\n\nde.biancoroyal.modbus.core.server.convertInputForBufferWrite = function (msg) {\n  let isMultipleWrite = false\n  if (msg.payload.value.length) {\n    msg.bufferPayload = new Uint8Array(msg.payload.value)\n    msg.bufferData = Buffer.alloc(msg.bufferPayload.buffer.byteLength, msg.bufferPayload)\n    isMultipleWrite = true\n    msg.wasMultipleWrite = true\n  } else {\n    msg.bufferPayload = parseInt(msg.payload.value)\n    msg.wasMultipleWrite = false\n  }\n\n  return isMultipleWrite\n}\n\nde.biancoroyal.modbus.core.server.copyToModbusBuffer = function (node, msg) {\n  switch (msg.payload.register) {\n    case 'holding':\n      msg.bufferData.copy(node.modbusServer.holding, msg.bufferAddress)\n      break\n    case 'coils':\n      msg.bufferData.copy(node.modbusServer.coils, msg.bufferAddress)\n      break\n    case 'input':\n      msg.bufferData.copy(node.modbusServer.input, msg.bufferAddress)\n      break\n    case 'discrete':\n      msg.bufferData.copy(node.modbusServer.discrete, msg.bufferAddress)\n      break\n    default:\n      return false\n  }\n  return true\n}\n\nde.biancoroyal.modbus.core.server.writeToModbusBuffer = function (node, msg) {\n  switch (msg.payload.register) {\n    case 'holding':\n      node.modbusServer.holding.writeUInt16BE(msg.bufferPayload, msg.bufferAddress)\n      break\n    case 'coils':\n      node.modbusServer.coils.writeUInt8(msg.bufferPayload, msg.bufferAddress)\n      break\n    case 'input':\n      node.modbusServer.input.writeUInt16BE(msg.bufferPayload, msg.bufferAddress)\n      break\n    case 'discrete':\n      node.modbusServer.discrete.writeUInt8(msg.bufferPayload, msg.bufferAddress)\n      break\n    default:\n      return false\n  }\n  return true\n}\nde.biancoroyal.modbus.core.server.writeModbusServerMemory = function (node, msg) {\n  const coreServer = de.biancoroyal.modbus.core.server\n  msg.bufferAddress = parseInt(msg.payload.address) * coreServer.bufferFactor\n\n  if (coreServer.convertInputForBufferWrite(msg)) {\n    return coreServer.copyToModbusBuffer(node, msg)\n  } else {\n    return coreServer.writeToModbusBuffer(node, msg)\n  }\n}\n\nde.biancoroyal.modbus.core.server.writeToServerMemory = function (node, msg) {\n  const coreServer = de.biancoroyal.modbus.core.server\n  msg.payload.register = msg.payload.register.toLowerCase()\n  try {\n    if (coreServer.memoryTypes.includes(msg.payload.register)) {\n      coreServer.writeModbusServerMemory(node, msg)\n    }\n  } catch (err) {\n    msg.error = err\n    node.error(err)\n  }\n}\n\nde.biancoroyal.modbus.core.server.writeToFlexServerMemory = function (node, msg) {\n  const coreServer = de.biancoroyal.modbus.core.server\n  msg.payload.register = msg.payload.register.toLowerCase()\n  try {\n    if (coreServer.memoryTypes.includes(msg.payload.register)) {\n      coreServer.writeModbusFlexServerMemory(node, msg)\n    }\n  } catch (err) {\n    msg.error = err\n    node.error(err)\n  }\n}\n\nmodule.exports = de.biancoroyal.modbus.core.server\n"]}