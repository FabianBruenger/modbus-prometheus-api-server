{"version":3,"sources":["modbus-write.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","showStatusActivities","showErrors","unitid","dataType","adr","Number","quantity","keepMsgProperties","verboseLogging","delayOnStart","settings","node","bufferMessageList","parseInt","Map","startDelayTime","delayOccured","inputDelayTimer","modbusClient","setNodeStatusTo","initModbusClientEvents","getNode","verboseWarn","logMessage","clearTimeout","warn","onModbusWriteDone","registerForModbus","send","resp","msg","errorProtocolMsg","buildMessage","payload","onModbusWriteError","err","origMsg","sendEmptyMsgOnFail","setModbusError","Object","hasOwnProperty","getOriginalMessage","value","indexOf","emit","parse","setMsgPayloadFromHTTPRequests","prototype","call","buildNewMessageObject","getObjectId","messageId","JSON","address","topic","isReadyForInput","isNotReadyForInput","initializeInputDelayTimer","resetInputDelayTimer","isActive","id","invalidPayloadIn","isInactive","INPUT_TIMEOUT_MILLISECONDS","origMsgInput","on","deregisterForModbus","assign","httpMsg","newMsg","set","buildNewMessage","actualServiceState","done","clear","setNodeDefaultStatus"],"mappings":"aAcAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,iBAAA,EAGNC,EAASD,QAAQ,oBAAoB,EAF3CA,EAAQA,QAAsBF,OAAS,EAAA,qBAAA,EAgLvCD,EAAIK,MAAMC,aAAa,eA9KvB,SAAuBC,GACvBP,EAAMQ,MAAAA,WAAmBL,KAAAA,CAAQ,EAG/BH,KAAIK,KAAMI,EAAAA,KAEVC,KAAKC,qBAAkBJ,EAAAK,qBACvBF,KAAKE,WAAAA,EAAoBC,WACzBH,KAAKG,aAAaN,EAAOM,aAGzBH,KAAKI,OAASP,EAAOO,OACrBJ,KAAKK,SAAWR,EAAOQ,SACvBL,KAAKM,IAAMC,OAAOV,EAAOS,GAAG,EAC5BN,KAAKQ,SAAWX,EAAOW,SAGvBR,KAAKS,eAAiBZ,EAAGA,eACzBG,KAAKF,kBAAmBA,EAAAA,kBACxBE,KAAKU,iBAAiBpB,EAEtBU,KAAKW,eAAed,EAAMe,SAACD,QAG3BX,KAAMa,aAAWhB,EAAAc,aACjBE,KAAKC,eAAiBC,SAAOC,EAAKC,cAAA,GAAA,GAElCJ,IAAKK,EAAAA,KAUL1B,GATAqB,EAAKM,kBAAkB,IAAIH,IAE3BxB,EAAAA,2BAAkC,IAElCqB,EAAMO,aAAe9B,CAAAA,EACrBuB,EAAKO,gBAAc,KAEnB5B,EAAA6B,gBAAA,UAAAR,CAAA,EAESS,EAAAA,MAAsBC,QAAOH,EAAAA,MAAa,GAyDnD,SAgBII,EAAYC,GACZC,EAAAA,SAAab,SAAKM,EAAAA,cACpBN,EAAAc,KAAA,aAAAF,CAAA,CAdF,CA3DKG,IAHLR,EAMES,kBAAAhB,CAAA,EALFrB,EAOOsC,uBAAyBjB,EAAKC,CAAAA,EAErCD,EAACe,kBAAA,SAAAG,EAAAC,GAEIC,EAAAA,sBACHzC,EAASW,gBAAY,aAAAU,CAAA,EAGtBA,EAAAiB,KAAApC,EAAAwC,aAAArB,EAAAC,kBAAAkB,EAAAG,QAAAJ,EAAAC,CAAA,CAAA,EAEDnB,EAAKuB,KAAAA,qBAAqB,CAR1B,EAEAvB,EASEA,iBAAsBwB,SAAKC,EAAQN,GACnCxC,EAAS+C,YACT/C,EAASgD,YAAc3B,EAAKwB,EAAEjB,CAAAA,CAEhC,EAPAP,EAUEuB,mBAAA,SAAAC,EAAAL,GACAnB,EAAI4B,iBAAiBC,EAAAA,OAAAA,EATrB,IAWMV,EAAIG,EAAaQ,mBAAmBR,EAAAA,kBAAkBH,CAAS,EAVrEnB,EAWImB,iBAAiBK,EAAOC,CAACH,EAV7B3C,EAWS+C,mBAAA1B,EAAAwB,EAAAL,CAAA,EAVTxC,EAWQwC,eAAYY,EAAMC,EAAiBR,EAAEC,CAAA,EAV7CzB,EAAKiC,KAWKX,sBAAqBY,CAVjC,EAEAlC,EAWEmC,8BAAA,SAAAhB,GACA,OACDS,OAAAQ,UAAAP,eAAAQ,KAAAlB,EAAAG,QAAA,OAAA,GAE4B,UAAzB,OAACgB,EAAAA,QAAAA,QACsBC,SAAnBC,EAAAA,QAAY3D,OAAoB,UAAAsC,EAAAG,QAAAS,MACtCZ,EAAOG,QAAAS,MAAA,SAAAZ,EAAAG,QAAAS,MAEI,CAAA,EAATS,EAASlB,QAATkB,MAASR,QAAA,GAAA,IACTV,EAAOA,QAAES,MAAAU,KAAAP,MAAAf,EAAAG,QAAAS,KAAA,IAIPW,CAXN,EAEA1C,EAYIsC,sBAAA,SAAAtC,EAAAmB,GACF,IAACqB,EAAA3D,EAAA0D,YAAA,EACF,MAAA,CAEDI,MAAShC,EAAAA,OAAaC,EAAAA,GACpB4B,UAAAA,EACExC,QAAS,CACX+B,MAAAH,OAAAQ,UAAAP,eAAAQ,KAAAlB,EAAAG,QAAA,OAAA,EAAAH,EAAAG,QAAAS,MAAAZ,EAAAG,QACF/B,OAAAS,EAAAT,OAEKqD,GAAAA,EAAAA,wBAA8B5C,EAAAR,QAAA,EACjCkD,QAAQnC,EAAAA,IACTZ,SAAAK,EAAAL,SAEIkD,UAAAA,CACH,CACD,CAED7C,EASAA,EAAK8C,gBAAAA,WACH9C,OAAK+C,EAAAA,QAAsBxC,EAAAyC,SAAA,GAAAhD,EAAAK,YAhB7B,EAEAL,EAiBIA,mBAAoB,WAhBtB,MAiBIA,CAAIA,EAACK,gBAAmB,CAhB9B,EAEAL,EAiBIA,qBAAwB,WAC1BA,EAAAM,kBACDK,EAAA,gCAAAX,EAAAiD,EAAA,EAEGpC,aAACiC,EAAAA,eAA2B,GAG9B9C,EAAIrB,gBAASuE,KAlBblD,EAmBEW,aAAY,CAAA,CAlBhB,EAEAX,EAoBE8C,0BAA+B,WAnB/B9C,EAoBEW,qBAAY,EACZX,EAAAF,cACFa,EAAA,qCAAAX,EAAAiD,EAAA,EAEAjD,EAAIO,gBAAa4C,WAAc,WAC7BxC,EAAAA,aAAY,CAAA,CACZ,EAAAX,EAAOoD,2BAAKpD,EAAAI,cAAA,GAGdJ,EAAMqD,aAAezB,CAAAA,CApBvB,EAEA5B,EAsBIA,0BAA0B,EApB9BA,EAuBIsD,GAAItD,QAAKX,SAAAA,GAtBX,GAuBIV,EAAS6B,iBAAgBD,CAAAA,EAC3BI,EAAA,2BAAA,OAIF,GAAAX,EAAA6C,mBAAA,EACAlC,EAAA,2CAAA,MADA,CAMAJ,GAAAA,EAAagD,WAAAA,EAGX,OAFF5C,EAAA,mGAAA,EAEQtB,CAAAA,EAGZgE,EAAAzB,OAAA4B,OAAA,GAAArC,CAAA,EAEIrC,IACL,IAAA2E,EAAAzD,EAAAmC,8BAAAkB,CAAA,EAzBaK,EAAS1D,EAAKsC,sBAAsBtC,EAAMyD,CAAO,EACvDzD,EAAKC,kBAAkB0D,IAAID,EAAOlB,UAAW7D,EAASiF,gBAAgB5D,EAAKJ,kBAAmB6D,EAASC,CAAM,CAAC,EAC9GnD,EAAa0B,KAAK,cAAeyB,EAAQ1D,EAAKe,kBAAmBf,EAAKuB,kBAAkB,EAEpFvB,EAAKX,sBACPV,EAAS6B,gBAAgBD,EAAasD,mBAAoB7D,CAAI,CAKlE,CAHE,MAAOwB,GACPxB,EAAKoB,iBAAiBI,EAAK6B,CAAY,EACvC1E,EAAS+C,mBAAmB1B,EAAMwB,EAAK6B,CAAY,CACrD,CAIA1E,CAHF,CAAC,EAEDqB,EAAKsD,GAAG,QAAS,SAAUQ,GACzBnF,EAAS6B,gBAAgB,SAAUR,CAAI,EACvCA,EAAKC,kBAAkB8D,MAAK,EAC5BxD,EAAagD,oBAAoBvD,EAAKiD,GAAIa,CAAI,CAChD,CAAC,EAEI9D,EAAKX,sBACRV,EAASqF,qBAAqBhE,CAAI,EAEtC,CAEkD,CACpD","file":"../modbus-write.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus Write node.\n * @module NodeRedModbusWrite\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const internalDebugLog = require('debug')('contribModbus:write')\n\n  function ModbusWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n\n    this.unitid = config.unitid\n    this.dataType = config.dataType\n    this.adr = Number(config.adr)\n    this.quantity = config.quantity\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    const node = this\n    node.bufferMessageList = new Map()\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n    node.delayOccured = false\n    node.inputDelayTimer = null\n\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusWriteDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('write done', node)\n      }\n\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\n      node.emit('modbusWriteNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusWriteError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusWriteNodeError')\n    }\n\n    node.setMsgPayloadFromHTTPRequests = function (msg) {\n      /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'value') &&\n        typeof msg.payload.value === 'string') {\n        if (msg.payload.value === 'true' || msg.payload.value === 'false') {\n          msg.payload.value = (msg.payload.value === 'true')\n        } else {\n          if (msg.payload.value.indexOf(',') > -1) {\n            msg.payload.value = JSON.parse(msg.payload.value)\n          }\n        }\n      }\n      return msg\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          value: (Object.prototype.hasOwnProperty.call(msg.payload, 'value')) ? msg.payload.value : msg.payload,\n          unitid: node.unitid,\n          fc: mbCore.functionCodeModbusWrite(node.dataType),\n          address: node.adr,\n          quantity: node.quantity,\n          messageId\n        }\n      }\n    }\n\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        node.warn('Writer -> ' + logMessage)\n      }\n    }\n\n    node.isReadyForInput = function () {\n      return (modbusClient.client && modbusClient.isActive() && node.delayOccured)\n    }\n\n    node.isNotReadyForInput = function () {\n      return !node.isReadyForInput()\n    }\n\n    node.resetInputDelayTimer = function () {\n      if (node.inputDelayTimer) {\n        verboseWarn('reset input delay timer node ' + node.id)\n        clearTimeout(node.inputDelayTimer)\n      }\n      node.inputDelayTimer = null\n      node.delayOccured = false\n    }\n\n    node.initializeInputDelayTimer = function () {\n      node.resetInputDelayTimer()\n      if (node.delayOnStart) {\n        verboseWarn('initialize input delay timer node ' + node.id)\n        node.inputDelayTimer = setTimeout(() => {\n          node.delayOccured = true\n        }, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n      } else {\n        node.delayOccured = true\n      }\n    }\n\n    node.initializeInputDelayTimer()\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        verboseWarn('Invalid message on input.')\n        return\n      }\n\n      if (node.isNotReadyForInput()) {\n        verboseWarn('Inject while node is not ready for input.')\n        return\n      }\n\n      if (modbusClient.isInactive()) {\n        verboseWarn('You sent an input to inactive client. Please use initial delay on start or send data more slowly.')\n        return false\n      }\n\n      const origMsgInput = Object.assign({}, msg)\n      try {\n        const httpMsg = node.setMsgPayloadFromHTTPRequests(origMsgInput)\n        const newMsg = node.buildNewMessageObject(node, httpMsg)\n        node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, httpMsg, newMsg))\n        modbusClient.emit('writeModbus', newMsg, node.onModbusWriteDone, node.onModbusWriteError)\n\n        if (node.showStatusActivities) {\n          mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-write', ModbusWrite)\n}\n"]}