{"version":3,"sources":["modbus-read.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","internalDebugLog","createNode","this","name","config","topic","dataType","adr","quantity","rateUnit","delayOnStart","showStatusActivities","showErrors","startDelayTime","connection","useIOFile","ioFile","getNode","useIOForPayload","emptyMsgOnFail","verboseLogging","settings","node","logIOActivities","INPUT_TIMEOUT_MILLISECONDS","statusText","delayTimerReading","verbose","setNodeStatusWithTimeTo","timeoutOccurred","logMessage","modbusClient","showWarnings","warn","intervalTimerIdReading","verboseWarn","onModbusConnect","id","server","httpAdmin","statusValue","sendStatus","params","setNodeStatusProperties","search","error","statusOptions","status","rate","get_timeUnit_name","newStatusText","fill","shape","text","onModbusInit","resetAllReadingTimer","initializeReadingTimer","onModbusError","serialSendingAllowed","reconnectOnTimeout","onModbusActive","errorProtocolMsg","onModbusReadError","err","message","sendEmptyMsgOnFail","reconnectTimeout","resp","msg","sendMessage","valueNames","origMsg","values","sendingNodeId","lastUpdatedAt","payload","response","mbIOCore","filterValueNames","allValueNames","functionCodeModbusRead","input","send","responseBuffer","unitid","fc","logMsgError","onModbusReadDone","modbusPollingRead","resetIntervalToRead","client","clearInterval","address","messageId","resetDelayTimerToRead","startIntervalReading","emit","clearTimeout","removeNodeListenerFromModbusClient","removeListener","onModbusQueue","calc_rateByUnit","setTimeout","onModbusClose","onModbusBroken","onModbusRegister","on","done","registerForModbus","post","auth","needsPermission","req","res","_","toString"],"mappings":"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","file":"../modbus-read.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n Copyright 2013, 2016 IBM Corp. (node-red)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus Read node.\n * @module NodeRedModbusRead\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const mbIOCore = require('./core/modbus-io-core')\n  const internalDebugLog = require('debug')('contribModbus:read')\n\n  function ModbusRead (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.topic = config.topic\n    this.unitid = config.unitid\n\n    this.dataType = config.dataType\n    this.adr = config.adr\n    this.quantity = config.quantity || 1\n\n    this.rate = config.rate\n    this.rateUnit = config.rateUnit\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    let timeoutOccurred = false\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n    node.statusText = 'waiting'\n    node.delayTimerReading = false\n    node.intervalTimerIdReading = false\n    setNodeStatusWithTimeTo(node.statusText)\n\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        node.warn('Read -> ' + logMessage + ' address: ' + node.adr)\n      }\n    }\n\n    verboseWarn('open node ' + node.id)\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n\n    node.onModbusInit = function () {\n      setNodeStatusWithTimeTo('initialized')\n    }\n\n    node.onModbusConnect = function () {\n      setNodeStatusWithTimeTo('connected')\n      node.resetAllReadingTimer()\n      node.initializeReadingTimer()\n    }\n\n    node.onModbusRegister = function () {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('registered')\n      }\n\n      if (modbusClient.serialSendingAllowed) {\n        node.resetAllReadingTimer()\n        node.initializeReadingTimer()\n        setNodeStatusWithTimeTo('connected')\n      }\n    }\n\n    node.onModbusActive = function () {\n      setNodeStatusWithTimeTo('active')\n    }\n\n    node.onModbusQueue = function () {\n      setNodeStatusWithTimeTo('queue')\n    }\n\n    node.onModbusError = function (failureMsg) {\n      setNodeStatusWithTimeTo('failure')\n      if (modbusClient.reconnectOnTimeout) {\n        node.resetAllReadingTimer()\n      }\n\n      if (node.showErrors) {\n        node.warn(failureMsg)\n      }\n    }\n\n    node.onModbusClose = function () {\n      setNodeStatusWithTimeTo('closed')\n      node.resetAllReadingTimer()\n    }\n\n    node.onModbusBroken = function () {\n      setNodeStatusWithTimeTo('broken')\n      if (modbusClient.reconnectOnTimeout) {\n        setNodeStatusWithTimeTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.')\n        node.resetAllReadingTimer()\n      }\n    }\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('reading done')\n      }\n      sendMessage(resp.data, resp, msg)\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      node.errorProtocolMsg(err, msg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, msg)\n    }\n\n    node.modbusPollingRead = function () {\n      if (!modbusClient.client) {\n        setNodeStatusWithTimeTo('waiting')\n        return\n      }\n\n      const msg = {\n        topic: node.topic || 'polling',\n        from: node.name,\n        payload: {\n          unitid: node.unitid,\n          fc: mbCore.functionCodeModbusRead(node.dataType),\n          address: node.adr,\n          quantity: node.quantity,\n          messageId: mbCore.getObjectId()\n        }\n      }\n\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('polling')\n      }\n\n      modbusClient.emit('readModbus', msg, node.onModbusReadDone, node.onModbusReadError)\n    }\n\n    node.resetDelayTimerToRead = function (node) {\n      if (node.delayTimerReading) {\n        verboseWarn('resetDelayTimerToRead node ' + node.id)\n        clearTimeout(node.delayTimerReading)\n      }\n      node.delayTimerReading = null\n    }\n\n    node.resetIntervalToRead = function (node) {\n      if (node.intervalTimerIdReading) {\n        verboseWarn('resetIntervalToRead node ' + node.id)\n        clearInterval(node.intervalTimerIdReading)\n      }\n      node.intervalTimerIdReading = null\n    }\n\n    node.resetAllReadingTimer = function () {\n      node.resetDelayTimerToRead(node)\n      node.resetIntervalToRead(node)\n    }\n\n    node.resetAllReadingTimer()\n\n    node.startIntervalReading = function () {\n      if (!node.intervalTimerIdReading) {\n        verboseWarn('startIntervalReading node ' + node.id)\n        node.intervalTimerIdReading = setInterval(node.modbusPollingRead, mbBasics.calc_rateByUnit(node.rate, node.rateUnit))\n      }\n    }\n\n    node.initializeReadingTimer = function () {\n      node.resetAllReadingTimer()\n      if (node.delayOnStart) {\n        verboseWarn('initializeReadingTimer delay timer node ' + node.id)\n        node.delayTimerReading = setTimeout(node.startIntervalReading, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n      } else {\n        node.startIntervalReading()\n      }\n    }\n\n    node.removeNodeListenerFromModbusClient = function () {\n      modbusClient.removeListener('mbinit', node.onModbusInit)\n      modbusClient.removeListener('mbqueue', node.onModbusQueue)\n      modbusClient.removeListener('mbconnected', node.onModbusConnect)\n      modbusClient.removeListener('mbactive', node.onModbusActive)\n      modbusClient.removeListener('mberror', node.onModbusError)\n      modbusClient.removeListener('mbclosed', node.onModbusClose)\n      modbusClient.removeListener('mbbroken', node.onModbusBroken)\n      modbusClient.removeListener('mbregister', node.onModbusRegister)\n      modbusClient.removeListener('mbderegister', node.onModbusClose)\n    }\n\n    this.on('close', function (done) {\n      node.resetAllReadingTimer()\n      node.removeNodeListenerFromModbusClient()\n      setNodeStatusWithTimeTo('closed')\n      verboseWarn('close node ' + node.id)\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    function sendMessage (values, response, msg) {\n      const topic = msg.topic || node.topic\n      if (node.useIOFile && node.ioFile.lastUpdatedAt) {\n        if (node.logIOActivities) {\n          mbIOCore.internalDebug('node.adr:' + node.adr + ' node.quantity:' + node.quantity)\n        }\n\n        const allValueNames = mbIOCore.nameValuesFromIOFile(node, msg, values, response, node.adr)\n        const valueNames = mbIOCore.filterValueNames(node, allValueNames, mbCore.functionCodeModbusRead(node.dataType), node.adr, node.quantity)\n\n        const origMsg = {\n          topic,\n          responseBuffer: response,\n          input: msg,\n          sendingNodeId: node.id\n        }\n\n        if (node.useIOForPayload) {\n          origMsg.payload = valueNames\n          origMsg.values = values\n        } else {\n          origMsg.payload = values\n          origMsg.valueNames = valueNames\n        }\n\n        node.send([\n          origMsg,\n          {\n            topic,\n            payload: response,\n            values,\n            input: msg,\n            valueNames,\n            sendingNodeId: node.id\n          }])\n      } else {\n        node.send([\n          {\n            topic,\n            payload: values,\n            responseBuffer: response,\n            input: msg,\n            sendingNodeId: node.id\n          },\n          {\n            topic,\n            payload: response,\n            values,\n            input: msg,\n            sendingNodeId: node.id\n          }\n        ])\n      }\n    }\n\n    function setNodeStatusWithTimeTo (statusValue) {\n      if (statusValue === 'polling' && timeoutOccurred) {\n        return\n      }\n\n      const statusOptions = mbBasics.setNodeStatusProperties(statusValue, node.showStatusActivities)\n      const statusText = node.statusText\n\n      if (statusValue.search('active') !== -1 || statusValue === 'polling') {\n        const newStatusText = statusOptions.status + getTimeInfo()\n        timeoutOccurred = false\n        if (newStatusText !== statusText) {\n          node.status({\n            fill: statusOptions.fill,\n            shape: statusOptions.shape,\n            text: newStatusText\n          })\n        }\n      } else {\n        const newStatusText = statusOptions.status\n        if (newStatusText !== statusText) {\n          node.status({\n            fill: statusOptions.fill,\n            shape: statusOptions.shape,\n            text: newStatusText\n          })\n        }\n      }\n    }\n\n    function getTimeInfo () {\n      return ' ( ' + node.rate + ' ' + mbBasics.get_timeUnit_name(node.rateUnit) + ' ) '\n    }\n\n    if (node.showStatusActivities) {\n      modbusClient.on('mbinit', node.onModbusInit)\n      modbusClient.on('mbqueue', node.onModbusQueue)\n    }\n\n    modbusClient.on('mbconnected', node.onModbusConnect)\n    modbusClient.on('mbactive', node.onModbusActive)\n    modbusClient.on('mberror', node.onModbusError)\n    modbusClient.on('mbclosed', node.onModbusClose)\n    modbusClient.on('mbbroken', node.onModbusBroken)\n    modbusClient.on('mbregister', node.onModbusRegister)\n    modbusClient.on('mbderegister', node.onModbusClose)\n\n    modbusClient.registerForModbus(node)\n  }\n\n  RED.nodes.registerType('modbus-read', ModbusRead)\n\n  RED.httpAdmin.post('/modbus/read/inject/:id', RED.auth.needsPermission('modbus.inject.write'), function (req, res) {\n    const node = RED.nodes.getNode(req.params.id)\n\n    if (node) {\n      try {\n        node.modbusPollingRead()\n        res.sendStatus(200)\n      } catch (err) {\n        res.sendStatus(500)\n        node.error(RED._('modbusinject.failed', { error: err.toString() }))\n      }\n    } else {\n      res.sendStatus(404)\n    }\n  })\n}\n"]}