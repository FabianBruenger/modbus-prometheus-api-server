{"version":3,"sources":["modbus-io-config.js"],"names":["module","exports","RED","install","coreIO","require","nodes","registerType","config","setMaxListeners","UNLIMITED_LISTENERS","this","name","path","format","addressOffset","lineReader","node","lastUpdatedAt","internalDebug","LineByLineReader","configData","on","err","message","line","push","JSON","parse","allValueNamesFromIOFile","Date","now","warn","payload","emit","watcher","watchFile","curr","prev","mtime","done","fs","unwatchFile"],"mappings":"aAMAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,uBAAA,EA+EZH,EAAII,MAAMC,aAAa,mBA9EvBF,SAA6BG,GAC7B,IAAMJ,EAASC,QAAQ,UAAA,EAchBI,GAVLP,EAAMQ,MAAAA,WAAAA,KAAuBF,CAAA,EAI7BG,KAAKC,KAAOJ,EAAOI,KACnBD,KAAKE,KAAOL,EAAOK,KACnBF,KAAKG,OAASN,EAAOM,OACrBH,KAAKI,cAAgBP,EAAOO,cAGvBN,MAGCO,GAFNC,EAAKC,gBAbsBV,CAaF,EACzBS,EAAMD,cAAiBZ,KAChBe,IAAcf,EAAAgB,iBAAuBP,EAAKA,IAAA,GACjDI,EAAKI,cAAe,gBAAAJ,EAAAJ,IAAA,EAEpBG,EAAAA,WAAc,GAEdA,EAAEM,GAAA,QAAA,SAAAC,GAEFP,EAAAA,cAAsBO,EAAAC,OAAUC,CAFhC,CAAC,EAEDT,EAGEM,GAAA,OAAA,SAAAG,GACAA,GAEFT,EAAAA,WAAmBU,KAAEC,KAAAC,MAAYH,CAAA,CAAA,CAFjC,CAAC,EAEDT,EAGqBM,GAAElB,MAAOyB,WAF5BZ,EAE2DL,cAAMkB,KAAAC,IAAA,EADjE3B,EACwGe,cAAON,0BAAAA,EAAAA,IAAAA,EAAKI,EAAEe,KAAA,CAAAC,QAAA7B,EAAAyB,wBAAAZ,CAAA,EAAAL,KAAA,kCAAAC,KAAAI,EAAAJ,IAAA,CAAA,EACtHI,EAAKiB,KAAK,gBAAiBjB,EAAKI,UAAU,CAC5C,CAAC,EAIDJ,EAAKkB,cAAaC,+BAA0BnB,EAAMJ,IAAK,EAAvDI,EAEEb,QAAOe,EAAAA,UAAaF,EAAAJ,KAAA,SAAAwB,EAAAC,GAEpBlC,EAAIiC,cAAeC,yBAAAA,OAAYD,EAAAE,KAAA,CAAA,EAF/BnC,EAGEA,cAAOe,2BAAAA,OAAuCN,EAAK0B,KAAA,CAAA,EAEnDF,EAAOpB,QAAKC,EAAAA,QAEZd,EAAMY,cAAa,kBAAWI,EAAiBH,IAAI,EACnDD,EAAAA,WAAc,GAHd,OAIEZ,EAAOe,eAGTH,EAAc,IAAQZ,EAAAgB,iBAAgBH,EAAAJ,IAAA,GAC5BS,GAAE,QAAA,SAAAC,GAJVnB,EAKOiB,cAAWK,EAAKC,OAAKC,CAJ9B,CAAC,EAQDZ,EAAUM,GAAG,OAAQ,SAAAG,GACfA,GACJrB,EAAOe,WAAAA,KAAcQ,KAAAC,MAAAH,CAAA,CAAA,CAJvB,CAAC,EAEDT,EAG4GC,GAAI,MAACJ,WAAKI,EAAEC,cAAAY,KAAAC,IAAA,EACtHd,EAAKiB,cAAK,4BAAiCjB,EAAAJ,IAAA,EAC3CI,EAAAe,KAAA,CAAAC,QAAA7B,EAAAyB,wBAAAZ,CAAA,EAAAL,KAAA,kCAAAC,KAAAI,EAAAJ,IAAA,CAAA,EAEFT,EAAOe,KAAAA,gBAAcF,EAAAI,UAAA,CACvB,CAAA,EAGEjB,EAAIe,cAAS,iCAAgBF,EAAAJ,IAAA,EAFjC,CAAC,EAMDI,EAAEK,GAAA,QAAA,SAAAkB,GACJC,EAAAC,YAAAzB,EAAAJ,IAAA,EAEIP,EAAK6B,QAAC5B,KAAAA,EACXiC,EAAA,CAJG,CAAC,CACH,CAE6D,CAC/D","file":"../modbus-io-config.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus\n node-red-contrib-modbusio\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const coreIO = require('./core/modbus-io-core')\n\n  function ModbusIOConfigNode (config) {\n    const fs = require('fs-extra')\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.path = config.path\n    this.format = config.format\n    this.addressOffset = config.addressOffset\n\n    const node = this\n    node.setMaxListeners(UNLIMITED_LISTENERS)\n    node.lastUpdatedAt = null\n    const lineReader = new coreIO.LineByLineReader(node.path)\n    coreIO.internalDebug('Read IO File ' + node.path)\n    node.configData = []\n\n    lineReader.on('error', function (err) {\n      coreIO.internalDebug(err.message)\n    })\n\n    lineReader.on('line', function (line) {\n      if (line) {\n        node.configData.push(JSON.parse(line))\n      }\n    })\n\n    lineReader.on('end', function () {\n      node.lastUpdatedAt = Date.now()\n      coreIO.internalDebug('Read IO Done From File ' + node.path)\n      node.warn({ payload: coreIO.allValueNamesFromIOFile(node), name: 'Modbus Value Names From IO File', path: node.path })\n      node.emit('updatedConfig', node.configData)\n    })\n\n    coreIO.internalDebug('Loading IO File Started For ' + node.path)\n\n    node.watcher = fs.watchFile(node.path, (curr, prev) => {\n      coreIO.internalDebug(`the current mtime is: ${curr.mtime}`)\n      coreIO.internalDebug(`the previous mtime was: ${prev.mtime}`)\n\n      if (curr.mtime !== prev.mtime) {\n        coreIO.internalDebug('Reload IO File ' + node.path)\n        node.configData = []\n        delete node.lastUpdatedAt\n\n        const lineReader = new coreIO.LineByLineReader(node.path)\n        lineReader.on('error', function (err) {\n          coreIO.internalDebug(err.message)\n        })\n\n        lineReader.on('line', function (line) {\n          if (line) {\n            node.configData.push(JSON.parse(line))\n          }\n        })\n\n        lineReader.on('end', function () {\n          node.lastUpdatedAt = Date.now()\n          coreIO.internalDebug('Reload IO Done From File ' + node.path)\n          node.warn({ payload: coreIO.allValueNamesFromIOFile(node), name: 'Modbus Value Names From IO File', path: node.path })\n          node.emit('updatedConfig', node.configData)\n        })\n\n        coreIO.internalDebug('Reloading IO File Started For ' + node.path)\n      }\n    })\n\n    node.on('close', function (done) {\n      fs.unwatchFile(node.path)\n      node.watcher.stop()\n      done()\n    })\n  }\n\n  RED.nodes.registerType('modbus-io-config', ModbusIOConfigNode)\n}\n"]}