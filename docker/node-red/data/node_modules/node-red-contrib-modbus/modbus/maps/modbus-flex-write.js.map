{"version":3,"sources":["modbus-flex-write.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","showStatusActivities","showErrors","showWarnings","emptyMsgOnFail","keepMsgProperties","delayOnStart","startDelayTime","parseInt","node","bufferMessageList","modbusClient","delayOccured","Map","inputDelayTimer","setNodeStatusTo","registerForModbus","server","logMessage","settings","verbose","initializeInputDelayTimer","serverInfo","initModbusClientEvents","resp","msg","errorProtocolMsg","send","buildMessage","payload","emit","getOriginalMessage","sendEmptyMsgOnFail","err","prepareMsg","message","JSON","parse","origMsg","fc","unitid","isValidModbusMsg","isValid","address","Number","isInteger","quantity","setMsgPayloadFromHTTPRequests","hasOwnProperty","prototype","topic","messageId","value","Object","verboseWarn","call","indexOf","isNotReadyForInput","resetInputDelayTimer","getObjectId","clearTimeout","isReadyForInput","client","isActive","origMsgInput","id","on","setNodeDefaultStatus","isInactive","assign","httpMsg","newMsg","inputMsg","buildNewMessageObject","set","buildNewMessage","onModbusWriteDone","onModbusWriteError","actualServiceState","done","clear","deregisterForModbus"],"mappings":"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","file":"../modbus-flex-write.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus flexible Write node.\n * @module NodeRedModbusFlexWrite\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const internalDebugLog = require('debug')('contribModbus:flex:write')\n\n  function ModbusFlexWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    const node = this\n\n    node.bufferMessageList = new Map()\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n    node.delayOccured = false\n    node.inputDelayTimer = null\n\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusWriteDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('writing done', node)\n      }\n\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\n      node.emit('modbusFlexWriteNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusWriteError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusFlexWriteNodeError')\n    }\n\n    node.prepareMsg = function (msg) {\n      if (typeof msg.payload === 'string') {\n        msg.payload = JSON.parse(msg.payload)\n      }\n\n      msg.payload.fc = parseInt(msg.payload.fc)\n      msg.payload.unitid = parseInt(msg.payload.unitid)\n      msg.payload.address = parseInt(msg.payload.address)\n      msg.payload.quantity = parseInt(msg.payload.quantity)\n      return msg\n    }\n\n    node.isValidModbusMsg = function (msg) {\n      let isValid = true\n\n      if (!(Number.isInteger(msg.payload.fc) &&\n              (msg.payload.fc === 5 ||\n                msg.payload.fc === 6 ||\n                msg.payload.fc === 15 ||\n                msg.payload.fc === 16))) {\n        node.error('FC Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n            !(Number.isInteger(msg.payload.address) &&\n              msg.payload.address >= 0 &&\n              msg.payload.address <= 65535)) {\n        node.error('Address Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n            !(Number.isInteger(msg.payload.quantity) &&\n              msg.payload.quantity >= 1 &&\n              msg.payload.quantity <= 65535)) {\n        node.error('Quantity Not Valid', msg)\n        isValid &= false\n      }\n\n      return isValid\n    }\n\n    node.setMsgPayloadFromHTTPRequests = function (msg) {\n      /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'value') && typeof msg.payload.value === 'string') {\n        if (msg.payload.value === 'true' || msg.payload.value === 'false') {\n          msg.payload.value = (msg.payload.value === 'true')\n        } else {\n          if (msg.payload.value.indexOf(',') > -1) {\n            msg.payload.value = JSON.parse(msg.payload.value)\n          }\n        }\n      }\n      return msg\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          value: (Object.prototype.hasOwnProperty.call(msg.payload, 'value')) ? msg.payload.value : msg.payload,\n          unitid: msg.payload.unitid,\n          fc: msg.payload.fc,\n          address: msg.payload.address,\n          quantity: msg.payload.quantity,\n          messageId\n        }\n      }\n    }\n\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        // node.updateServerinfo()\n        node.warn('Flex-Write -> ' + logMessage + ' ' + node.serverInfo)\n      }\n    }\n\n    node.isReadyForInput = function () {\n      return (modbusClient.client && modbusClient.isActive() && node.delayOccured)\n    }\n\n    node.isNotReadyForInput = function () {\n      return !node.isReadyForInput()\n    }\n\n    node.resetInputDelayTimer = function () {\n      if (node.inputDelayTimer) {\n        verboseWarn('reset input delay timer node ' + node.id)\n        clearTimeout(node.inputDelayTimer)\n      }\n      node.inputDelayTimer = null\n      node.delayOccured = false\n    }\n\n    node.initializeInputDelayTimer = function () {\n      node.resetInputDelayTimer()\n      if (node.delayOnStart) {\n        verboseWarn('initialize input delay timer node ' + node.id)\n        node.inputDelayTimer = setTimeout(() => {\n          node.delayOccured = true\n        }, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n      } else {\n        node.delayOccured = true\n      }\n    }\n\n    node.initializeInputDelayTimer()\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        verboseWarn('Invalid message on input.')\n        return\n      }\n\n      if (node.isNotReadyForInput()) {\n        verboseWarn('Inject while node is not ready for input.')\n        return\n      }\n\n      if (modbusClient.isInactive()) {\n        verboseWarn('You sent an input to inactive client. Please use initial delay on start or send data more slowly.')\n        return false\n      }\n\n      const origMsgInput = Object.assign({}, msg)\n      try {\n        const inputMsg = node.prepareMsg(origMsgInput)\n        if (node.isValidModbusMsg(inputMsg)) {\n          const httpMsg = node.setMsgPayloadFromHTTPRequests(inputMsg)\n          const newMsg = node.buildNewMessageObject(node, httpMsg)\n          node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, httpMsg, newMsg))\n          modbusClient.emit('writeModbus', newMsg, node.onModbusWriteDone, node.onModbusWriteError)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-write', ModbusFlexWrite)\n}\n"]}