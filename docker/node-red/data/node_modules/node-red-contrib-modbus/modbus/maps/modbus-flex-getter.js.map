{"version":3,"sources":["modbus-flex-getter.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","showStatusActivities","showErrors","showWarnings","useIOFile","ioFile","getNode","useIOForPayload","logIOActivities","keepMsgProperties","verboseLogging","delayOnStart","settings","node","bufferMessageList","parseInt","Map","startDelayTime","delayOccured","inputDelayTimer","modbusClient","setNodeStatusTo","initModbusClientEvents","logMessage","verbose","warn","onModbusReadDone","registerForModbus","send","buildMessageWithIO","resp","msg","errorProtocolMsg","mbIOCore","data","onModbusReadError","err","origMsg","sendEmptyMsgOnFail","setModbusError","parse","message","payload","getOriginalMessage","unitid","address","isValidModbusMsg","isValid","Number","isInteger","fc","quantity","buildNewMessageObject","getObjectId","messageId","topic","error","emptyMsgOnFail","verboseWarn","isReadyForInput","resetInputDelayTimer","id","clearTimeout","value","initializeInputDelayTimer","client","isActive","origMsgInput","Object","prepareMsg","deregisterForModbus","invalidPayloadIn","isInactive","assign","newMsg","inputMsg","set","buildNewMessage","emit","actualServiceState","on","done","clear","setNodeDefaultStatus"],"mappings":"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","file":"../modbus-flex-getter.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n\n/**\n * Modbus flexible Getter node.\n * @module NodeRedModbusFlexGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const mbIOCore = require('./core/modbus-io-core')\n  const internalDebugLog = require('debug')('contribModbus:flex:getter')\n\n  function ModbusFlexGetter (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    const node = this\n    node.bufferMessageList = new Map()\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n    node.delayOccured = false\n    node.inputDelayTimer = null\n\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('reading done', node)\n      }\n\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\n      node.emit('modbusFlexGetterNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusFlexGetterNodeError')\n    }\n\n    node.prepareMsg = function (msg) {\n      if (typeof msg.payload === 'string') {\n        msg.payload = JSON.parse(msg.payload)\n      }\n\n      msg.payload.fc = parseInt(msg.payload.fc) || 3\n      msg.payload.unitid = parseInt(msg.payload.unitid)\n      msg.payload.address = parseInt(msg.payload.address) || 0\n      msg.payload.quantity = parseInt(msg.payload.quantity) || 1\n\n      return msg\n    }\n\n    node.isValidModbusMsg = function (msg) {\n      let isValid = true\n\n      if (!(Number.isInteger(msg.payload.fc) &&\n              msg.payload.fc >= 1 &&\n              msg.payload.fc <= 4)) {\n        node.error('FC Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n            !(Number.isInteger(msg.payload.address) &&\n            msg.payload.address >= 0 &&\n            msg.payload.address <= 65535)) {\n        node.error('Address Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n            !(Number.isInteger(msg.payload.quantity) &&\n            msg.payload.quantity >= 1 &&\n            msg.payload.quantity <= 65535)) {\n        node.error('Quantity Not Valid', msg)\n        isValid &= false\n      }\n\n      return isValid\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          value: msg.payload.value || msg.value,\n          unitid: msg.payload.unitid,\n          fc: msg.payload.fc,\n          address: msg.payload.address,\n          quantity: msg.payload.quantity,\n          emptyMsgOnFail: node.emptyMsgOnFail,\n          keepMsgProperties: node.keepMsgProperties,\n          messageId\n        }\n      }\n    }\n\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        node.warn('Flex-Getter -> ' + logMessage)\n      }\n    }\n\n    node.isReadyForInput = function () {\n      return (modbusClient.client && modbusClient.isActive() && node.delayOccured)\n    }\n\n    node.isNotReadyForInput = function () {\n      return !node.isReadyForInput()\n    }\n\n    node.resetInputDelayTimer = function () {\n      if (node.inputDelayTimer) {\n        verboseWarn('reset input delay timer node ' + node.id)\n        clearTimeout(node.inputDelayTimer)\n      }\n      node.inputDelayTimer = null\n      node.delayOccured = false\n    }\n\n    node.initializeInputDelayTimer = function () {\n      node.resetInputDelayTimer()\n      if (node.delayOnStart) {\n        verboseWarn('initialize input delay timer node ' + node.id)\n        node.inputDelayTimer = setTimeout(() => {\n          node.delayOccured = true\n        }, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n      } else {\n        node.delayOccured = true\n      }\n    }\n\n    node.initializeInputDelayTimer()\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        verboseWarn('Invalid message on input.')\n        return\n      }\n\n      if (node.isNotReadyForInput()) {\n        verboseWarn('Inject while node is not ready for input.')\n        return\n      }\n\n      if (modbusClient.isInactive()) {\n        verboseWarn('You sent an input to inactive client. Please use initial delay on start or send data more slowly.')\n        return\n      }\n\n      const origMsgInput = Object.assign({}, msg) // keep it origin\n      try {\n        const inputMsg = node.prepareMsg(origMsgInput)\n        if (node.isValidModbusMsg(inputMsg)) {\n          const newMsg = node.buildNewMessageObject(node, inputMsg)\n          node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, inputMsg, newMsg))\n          modbusClient.emit('readModbus', newMsg, node.onModbusReadDone, node.onModbusReadError)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n      }\n    })\n\n    node.on('close', function (done) {\n      node.resetInputDelayTimer()\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-getter', ModbusFlexGetter)\n}\n"]}