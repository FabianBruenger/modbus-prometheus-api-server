"use strict";module.exports=function(i){require("source-map-support").install();var a=require("./modbus-basics"),s=require("./core/modbus-queue-core"),r=require("debug")("contribModbus:queue");i.nodes.registerType("modbus-queue-info",function(e){i.nodes.createNode(this,e),this.name=e.name,this.topic=e.topic,this.unitid=parseInt(e.unitid)||1,this.lowLowLevel=parseInt(e.lowLowLevel),this.lowLevel=parseInt(e.lowLevel),this.highLevel=parseInt(e.highLevel),this.highHighLevel=parseInt(e.highHighLevel),this.errorOnHighLevel=e.errorOnHighLevel,this.queueReadIntervalTime=e.queueReadIntervalTime||1e3,this.showStatusActivities=e.showStatusActivities,this.updateOnAllQueueChanges=e.updateOnAllQueueChanges,this.updateOnAllUnitQueues=e.updateOnAllUnitQueues,this.internalDebugLog=r;var n=this,o=(n.queueReadInterval=null,n.updateStatusRrunning=!1,n.unitsWithQueue=new Map,a.setNodeStatusTo("waiting",n),i.nodes.getNode(e.server));o&&(o.registerForModbus(n),n.initUnitQueueStates=function(){for(var e=0;e<256;e+=1)n.unitsWithQueue.set(e,{}),n.resetStates(e)},n.resetStates=function(e){e=n.unitsWithQueue.get(e);e.lowLowLevelReached=!0,e.lowLevelReached=!1,e.highLevelReached=!1,e.highHighLevelReached=!1},n.errorProtocolMsg=function(e,t){n.showErrors&&a.logMsgError(n,e,t)},n.initUnitQueueStates(),n.checkLowLevelReached=function(e,t,u){var i=e.unitsWithQueue.get(u);!i.lowLevelReached&&t>e.lowLowLevel&&t<e.lowLevel&&(i.lowLevelReached=!0,i={payload:Date.now(),topic:e.topic,state:"low level reached",unitid:u,modbusClientName:o.name,bufferCommandListLength:t},e.send(i))},n.checkHighLevelReached=function(e,t,u){var i=e.unitsWithQueue.get(u);!i.highLevelReached&&t>e.lowLevel&&t>e.highLevel&&(i.highLevelReached=!0,i={payload:Date.now(),topic:e.topic,state:"high level reached",unitid:u,modbusClientName:o.name||o.id,highLevel:e.highLevel,bufferCommandListLength:t},e.errorOnHighLevel?e.error(new Error("Queue High Level Reached"),i):e.warn(i),e.send(i))},n.checkHighHighLevelReached=function(e,t,u){var i=e.unitsWithQueue.get(u);!i.highHighLevelReached&&t>e.highLevel&&t>e.highHighLevel&&(i.highHighLevelReached=!0,i={payload:Date.now(),topic:e.topic,state:"high high level reached",unitid:u,modbusClientName:o.name||o.id,highLevel:e.highLevel,highHighLevel:e.highHighLevel,bufferCommandListLength:t},e.error(new Error("Queue High High Level Reached"),i),e.send(i))},n.getStatusSituationFillColor=function(e){var e=n.unitsWithQueue.get(e),t="blue";return e.lowLevelReached&&(t="green"),e.highLevelReached&&(t=n.errorOnHighLevel?"red":"yellow"),t=e.highHighLevelReached?"red":t},n.setNodeStatusByActivity=function(e,t){n.showStatusActivities&&n.status({fill:n.getStatusSituationFillColor(n.unitid),shape:"ring",text:e?"active unit "+t+" queue items: "+e:"active (Unit-Id: "+t+") empty"})},n.readFromQueue=function(){var i;if(!n.updateStatusRrunning)return i=n.unitid<1||255<n.unitid?1:n.unitid,o.bufferCommands?new Promise(function(e,t){try{n.updateStatusRrunning=!0;var u=o.bufferCommandList.get(i).length;n.checkQueueStates(u,i),n.setNodeStatusByActivity(u,i),n.updateStatusRrunning=!1,e()}catch(e){n.updateStatusRrunning=!1,t(e)}}):void(n.showStatusActivities&&n.setNodeStatusByActivity(null,i))},n.checkQueueStates=function(e,t){!n.unitsWithQueue.get(t).lowLowLevelReached&&e<n.lowLowLevel&&n.resetStates(t),n.checkLowLevelReached(n,e,t),n.checkHighLevelReached(n,e,t),n.checkHighHighLevelReached(n,e,t)},n.readFromAllUnitQueues=function(){return!n.updateStatusRrunning&&o.bufferCommands?new Promise(function(e,t){try{n.updateStatusRrunning=!0;for(var u,i=0;i<256;i+=1)(u=o.bufferCommandList.get(i).length)&&n.checkQueueStates(u,i);n.updateStatusRrunning=!1,e()}catch(e){n.updateStatusRrunning=!1,t(e)}}):void 0},n.registerModbusQueueActionsToNode=function(e){n.updateOnAllQueueChanges&&o.on("mbqueue",e),o.on("mbactive",e),o.on("mbinit",e),o.on("mbconnected",e),o.on("mberror",e),o.on("mbclosed",e),n.queueReadInterval=setInterval(e,n.queueReadIntervalTime)},n.removeModbusQueueActionsFromNode=function(e){o.removeListener("mbqueue",e),o.removeListener("mbactive",e),o.removeListener("mbinit",e),o.removeListener("mbconnected",e),o.removeListener("mberror",e),o.removeListener("mbclosed",e)},n.updateOnAllUnitQueues?(n.registerModbusQueueActionsToNode(n.readFromAllUnitQueues),a.setNodeStatusTo("active for all queues",n)):n.registerModbusQueueActionsToNode(n.readFromQueue),n.on("input",function(t){var u=n.unitid;if(t.payload={},t.payload.queueEnabled=o.bufferCommands,n.updateOnAllUnitQueues)t.payload.allQueueData=!0,t.payload.queues=o.bufferCommandList;else{try{u=t.payload.resetQueue?parseInt(t.payload.unitId)||n.unitid:parseInt(t.payload)||n.unitid}catch(e){n.errorProtocolMsg(e,t),a.sendEmptyMsgOnFail(n,e,t),u=n.unitid}t.payload.allQueueData=!1,t.payload.unitid=u,t.payload.queue=o.bufferCommandList.get(u)}t.payload.queueOptions={date:Date.now(),state:"queue request",modbusClientName:o.name||o.id,lowlowLevel:n.lowlowLevel,unitId:u,lowLevel:n.lowLevel,highLevel:n.highLevel,highHighLevel:n.highHighLevel},(t.payload.resetQueue||t.resetQueue)&&o.bufferCommands&&(s.initQueue(o),i.settings.verbose&&(o.warn(u="Init Queue By External Node"),r(u)),n.initUnitQueueStates(),n.showStatusActivities&&n.status({fill:"blue",shape:"ring",text:"active empty unit queue"}),t.payload.queueOptions.state="queue reset done"),n.send(t)}),n.on("close",function(e){n.updateOnAllUnitQueues?n.removeModbusQueueActionsFromNode(n.readFromAllUnitQueues):n.removeModbusQueueActionsFromNode(n.readFromQueue),a.setNodeStatusTo("closed",n),n.queueReadInterval&&clearInterval(n.queueReadInterval),n.queueReadInterval=null,o.deregisterForModbus(n.id,e)}),n.showStatusActivities||a.setNodeDefaultStatus(n))})};
//# sourceMappingURL=maps/modbus-queue-info.js.map
